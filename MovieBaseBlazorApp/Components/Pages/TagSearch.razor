@page "/tag-search/{tagName}"
@using Components.Services
@using MovieBase
@using MovieBase.Models
@inject MovieService MovieService
@rendermode InteractiveServer

<h3>Movies with Tag: @tagName</h3>

@if (movies == null)
{
    <p>Loading movies...</p>
}
else if (!movies.Any())
{
    <p>No movies found with tag "@tagName".</p>
}
else
{
    <div class="d-flex justify-content-between mb-3">
        <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
        <span>Page @_currentPage of @_totalPages</span>
        <button class="btn btn-primary" @onclick="NextPage" disabled="@(_currentPage >= _totalPages)">Next</button>
    </div>

    <div class="row g-3">
        @foreach (var movie in movies)
        {
            <div class="col-md-6 col-lg-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title text-primary">
                            <a href="/movie-details/@Uri.EscapeDataString(movie.Title)" class="text-decoration-none">
                                @movie.Title
                            </a>
                        </h5>
                        <h6 class="card-subtitle text-muted">Rating: <span class="fw-bold">@movie.Rating</span></h6>
                        <hr />
                        <p class="card-text">
                            <strong>Director:</strong> @movie.Director
                            <br />
                            <strong>Actors:</strong>
                            @if (actorCache.ContainsKey(movie.Title))
                            {
                                <ul class="list-unstyled ms-3">
                                    @foreach (var actor in actorCache[movie.Title])
                                    {
                                        <li>• @actor</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <span>Loading actors...</span>
                            }
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter] public string tagName { get; set; }

    private List<Movie> movies;
    private Dictionary<string, List<string>> actorCache = new();
    private int _currentPage = 1;
    private int _totalPages;
    private const int PageSize = 9;

    protected override async Task OnParametersSetAsync()
    {
        await LoadMoviesByTagAsync();
    }

    private async Task LoadMoviesByTagAsync()
    {
        var totalMovies = await MovieService.GetMoviesByTagCountAsync(tagName);
        _totalPages = (int)Math.Ceiling(totalMovies / (double)PageSize);
        movies = await MovieService.SearchMoviesByTagAsync(tagName, _currentPage, PageSize);

        _ = LoadActorsForPageAsync();
    }

    private async Task LoadActorsForPageAsync()
    {
        var tasks = movies
            .Where(movie => !actorCache.ContainsKey(movie.Title))
            .Select(async movie =>
            {
                var actors = await MovieService.GetActorsForMovieAsync(movie.Title);
                actorCache[movie.Title] = actors;
            });

        await Task.WhenAll(tasks);
        StateHasChanged();
    }

    private async Task NextPage()
    {
        _currentPage++;
        await LoadMoviesByTagAsync();
    }

    private async Task PreviousPage()
    {
        _currentPage--;
        await LoadMoviesByTagAsync();
    }
}
